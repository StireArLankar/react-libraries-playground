/* Generated by restful-react */

import React from 'react'
import {
  Get,
  GetProps,
  useGet,
  UseGetProps,
  Mutate,
  MutateProps,
  useMutate,
  UseMutateProps,
} from 'restful-react'

export type Omit<T, K extends keyof T> = Pick<T, Exclude<keyof T, K>>

export interface Category {
  id?: number
  name?: string
}

export interface Pet {
  id?: number
  category?: Category
  name: string
  photoUrls: string[]
  tags?: Tag[]
  /**
   * pet status in the store
   */
  status?: 'available' | 'pending' | 'sold'
}

export interface Tag {
  id?: number
  name?: string
}

export interface ApiResponse {
  code?: number
  type?: string
  message?: string
}

export interface Order {
  id?: number
  petId?: number
  quantity?: number
  shipDate?: string
  /**
   * Order Status
   */
  status?: 'placed' | 'approved' | 'delivered'
  complete?: boolean
}

export interface User {
  id?: number
  username?: string
  firstName?: string
  lastName?: string
  email?: string
  password?: string
  phone?: string
  /**
   * User Status
   */
  userStatus?: number
}

/**
 * List of user object
 */
export type UserArrayRequestBody = User[]

/**
 * Pet object that needs to be added to the store
 */
export type PetRequestBody = Pet

export type GetPetByIdProps = Omit<GetProps<Pet, void, void>, 'path'> & {
  petId: number
}

/**
 * Find pet by ID
 *
 * Returns a single pet
 */
export const GetPetById = ({ petId, ...props }: GetPetByIdProps) => (
  <Get<Pet, void, void> path={`/pet/${petId}`} {...props} />
)

export type UseGetPetByIdProps = Omit<UseGetProps<Pet, void>, 'path'> & {
  petId: number
}

/**
 * Find pet by ID
 *
 * Returns a single pet
 */
export const useGetPetById = ({ petId, ...props }: UseGetPetByIdProps) =>
  useGet<Pet, void, void>(`/pet/${petId}`, props)

export type UpdatePetWithFormProps = Omit<MutateProps<void, void, void, void>, 'path' | 'verb'> & {
  petId: number
}

/**
 * Updates a pet in the store with form data
 */
export const UpdatePetWithForm = ({ petId, ...props }: UpdatePetWithFormProps) => (
  <Mutate<void, void, void, void> verb='POST' path={`/pet/${petId}`} {...props} />
)

export type UseUpdatePetWithFormProps = Omit<UseMutateProps<void, void, void>, 'path' | 'verb'> & {
  petId: number
}

/**
 * Updates a pet in the store with form data
 */
export const useUpdatePetWithForm = ({ petId, ...props }: UseUpdatePetWithFormProps) =>
  useMutate<void, void, void, void>('POST', `/pet/${petId}`, props)

export type DeletePetProps = Omit<MutateProps<void, void, void, string>, 'path' | 'verb'>

/**
 * Deletes a pet
 */
export const DeletePet = (props: DeletePetProps) => (
  <Mutate<void, void, void, string> verb='DELETE' path={`/pet`} {...props} />
)

export type UseDeletePetProps = Omit<UseMutateProps<void, void, string>, 'path' | 'verb'>

/**
 * Deletes a pet
 */
export const useDeletePet = (props: UseDeletePetProps) =>
  useMutate<void, void, void, string>('DELETE', `/pet`, props)

export type UploadFileProps = Omit<
  MutateProps<ApiResponse, unknown, void, void>,
  'path' | 'verb'
> & { petId: number }

/**
 * uploads an image
 */
export const UploadFile = ({ petId, ...props }: UploadFileProps) => (
  <Mutate<ApiResponse, unknown, void, void>
    verb='POST'
    path={`/pet/${petId}/uploadImage`}
    {...props}
  />
)

export type UseUploadFileProps = Omit<UseMutateProps<ApiResponse, void, void>, 'path' | 'verb'> & {
  petId: number
}

/**
 * uploads an image
 */
export const useUploadFile = ({ petId, ...props }: UseUploadFileProps) =>
  useMutate<ApiResponse, unknown, void, void>('POST', `/pet/${petId}/uploadImage`, props)

export type AddPetProps = Omit<MutateProps<void, void, void, PetRequestBody>, 'path' | 'verb'>

/**
 * Add a new pet to the store
 */
export const AddPet = (props: AddPetProps) => (
  <Mutate<void, void, void, PetRequestBody> verb='POST' path={`/pet`} {...props} />
)

export type UseAddPetProps = Omit<UseMutateProps<void, void, PetRequestBody>, 'path' | 'verb'>

/**
 * Add a new pet to the store
 */
export const useAddPet = (props: UseAddPetProps) =>
  useMutate<void, void, void, PetRequestBody>('POST', `/pet`, props)

export type UpdatePetProps = Omit<MutateProps<void, void, void, PetRequestBody>, 'path' | 'verb'>

/**
 * Update an existing pet
 */
export const UpdatePet = (props: UpdatePetProps) => (
  <Mutate<void, void, void, PetRequestBody> verb='PUT' path={`/pet`} {...props} />
)

export type UseUpdatePetProps = Omit<UseMutateProps<void, void, PetRequestBody>, 'path' | 'verb'>

/**
 * Update an existing pet
 */
export const useUpdatePet = (props: UseUpdatePetProps) =>
  useMutate<void, void, void, PetRequestBody>('PUT', `/pet`, props)

export interface FindPetsByStatusQueryParams {
  /**
   * Status values that need to be considered for filter
   */
  status: ('available' | 'pending' | 'sold')[]
}

export type FindPetsByStatusProps = Omit<GetProps<Pet[], void, FindPetsByStatusQueryParams>, 'path'>

/**
 * Finds Pets by status
 *
 * Multiple status values can be provided with comma separated strings
 */
export const FindPetsByStatus = (props: FindPetsByStatusProps) => (
  <Get<Pet[], void, FindPetsByStatusQueryParams> path={`/pet/findByStatus`} {...props} />
)

export type UseFindPetsByStatusProps = Omit<UseGetProps<Pet[], FindPetsByStatusQueryParams>, 'path'>

/**
 * Finds Pets by status
 *
 * Multiple status values can be provided with comma separated strings
 */
export const useFindPetsByStatus = (props: UseFindPetsByStatusProps) =>
  useGet<Pet[], void, FindPetsByStatusQueryParams>(`/pet/findByStatus`, props)

export interface FindPetsByTagsQueryParams {
  /**
   * Tags to filter by
   */
  tags: string[]
}

export type FindPetsByTagsProps = Omit<GetProps<Pet[], void, FindPetsByTagsQueryParams>, 'path'>

/**
 * Finds Pets by tags
 *
 * Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.
 */
export const FindPetsByTags = (props: FindPetsByTagsProps) => (
  <Get<Pet[], void, FindPetsByTagsQueryParams> path={`/pet/findByTags`} {...props} />
)

export type UseFindPetsByTagsProps = Omit<UseGetProps<Pet[], FindPetsByTagsQueryParams>, 'path'>

/**
 * Finds Pets by tags
 *
 * Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.
 */
export const useFindPetsByTags = (props: UseFindPetsByTagsProps) =>
  useGet<Pet[], void, FindPetsByTagsQueryParams>(`/pet/findByTags`, props)

export interface GetInventoryResponse {
  [key: string]: number
}

export type GetInventoryProps = Omit<GetProps<GetInventoryResponse, unknown, void>, 'path'>

/**
 * Returns pet inventories by status
 *
 * Returns a map of status codes to quantities
 */
export const GetInventory = (props: GetInventoryProps) => (
  <Get<GetInventoryResponse, unknown, void> path={`/store/inventory`} {...props} />
)

export type UseGetInventoryProps = Omit<UseGetProps<GetInventoryResponse, void>, 'path'>

/**
 * Returns pet inventories by status
 *
 * Returns a map of status codes to quantities
 */
export const useGetInventory = (props: UseGetInventoryProps) =>
  useGet<GetInventoryResponse, unknown, void>(`/store/inventory`, props)

export type GetOrderByIdProps = Omit<GetProps<Order, void, void>, 'path'> & {
  orderId: number
}

/**
 * Find purchase order by ID
 *
 * For valid response try integer IDs with value >= 1 and <= 10. Other values will generated exceptions
 */
export const GetOrderById = ({ orderId, ...props }: GetOrderByIdProps) => (
  <Get<Order, void, void> path={`/store/order/${orderId}`} {...props} />
)

export type UseGetOrderByIdProps = Omit<UseGetProps<Order, void>, 'path'> & {
  orderId: number
}

/**
 * Find purchase order by ID
 *
 * For valid response try integer IDs with value >= 1 and <= 10. Other values will generated exceptions
 */
export const useGetOrderById = ({ orderId, ...props }: UseGetOrderByIdProps) =>
  useGet<Order, void, void>(`/store/order/${orderId}`, props)

export type DeleteOrderProps = Omit<MutateProps<void, void, void, string>, 'path' | 'verb'>

/**
 * Delete purchase order by ID
 *
 * For valid response try integer IDs with positive integer value. Negative or non-integer values will generate API errors
 */
export const DeleteOrder = (props: DeleteOrderProps) => (
  <Mutate<void, void, void, string> verb='DELETE' path={`/store/order`} {...props} />
)

export type UseDeleteOrderProps = Omit<UseMutateProps<void, void, string>, 'path' | 'verb'>

/**
 * Delete purchase order by ID
 *
 * For valid response try integer IDs with positive integer value. Negative or non-integer values will generate API errors
 */
export const useDeleteOrder = (props: UseDeleteOrderProps) =>
  useMutate<void, void, void, string>('DELETE', `/store/order`, props)

export type PlaceOrderProps = Omit<MutateProps<Order, void, void, Order>, 'path' | 'verb'>

/**
 * Place an order for a pet
 */
export const PlaceOrder = (props: PlaceOrderProps) => (
  <Mutate<Order, void, void, Order> verb='POST' path={`/store/order`} {...props} />
)

export type UsePlaceOrderProps = Omit<UseMutateProps<Order, void, Order>, 'path' | 'verb'>

/**
 * Place an order for a pet
 */
export const usePlaceOrder = (props: UsePlaceOrderProps) =>
  useMutate<Order, void, void, Order>('POST', `/store/order`, props)

export type CreateUserProps = Omit<MutateProps<void, void, void, User>, 'path' | 'verb'>

/**
 * Create user
 *
 * This can only be done by the logged in user.
 */
export const CreateUser = (props: CreateUserProps) => (
  <Mutate<void, void, void, User> verb='POST' path={`/user`} {...props} />
)

export type UseCreateUserProps = Omit<UseMutateProps<void, void, User>, 'path' | 'verb'>

/**
 * Create user
 *
 * This can only be done by the logged in user.
 */
export const useCreateUser = (props: UseCreateUserProps) =>
  useMutate<void, void, void, User>('POST', `/user`, props)

export type CreateUsersWithArrayInputProps = Omit<
  MutateProps<void, void, void, UserArrayRequestBody>,
  'path' | 'verb'
>

/**
 * Creates list of users with given input array
 */
export const CreateUsersWithArrayInput = (props: CreateUsersWithArrayInputProps) => (
  <Mutate<void, void, void, UserArrayRequestBody>
    verb='POST'
    path={`/user/createWithArray`}
    {...props}
  />
)

export type UseCreateUsersWithArrayInputProps = Omit<
  UseMutateProps<void, void, UserArrayRequestBody>,
  'path' | 'verb'
>

/**
 * Creates list of users with given input array
 */
export const useCreateUsersWithArrayInput = (props: UseCreateUsersWithArrayInputProps) =>
  useMutate<void, void, void, UserArrayRequestBody>('POST', `/user/createWithArray`, props)

export type CreateUsersWithListInputProps = Omit<
  MutateProps<void, void, void, UserArrayRequestBody>,
  'path' | 'verb'
>

/**
 * Creates list of users with given input array
 */
export const CreateUsersWithListInput = (props: CreateUsersWithListInputProps) => (
  <Mutate<void, void, void, UserArrayRequestBody>
    verb='POST'
    path={`/user/createWithList`}
    {...props}
  />
)

export type UseCreateUsersWithListInputProps = Omit<
  UseMutateProps<void, void, UserArrayRequestBody>,
  'path' | 'verb'
>

/**
 * Creates list of users with given input array
 */
export const useCreateUsersWithListInput = (props: UseCreateUsersWithListInputProps) =>
  useMutate<void, void, void, UserArrayRequestBody>('POST', `/user/createWithList`, props)

export type GetUserByNameProps = Omit<GetProps<User, void, void>, 'path'> & {
  username: string
}

/**
 * Get user by user name
 */
export const GetUserByName = ({ username, ...props }: GetUserByNameProps) => (
  <Get<User, void, void> path={`/user/${username}`} {...props} />
)

export type UseGetUserByNameProps = Omit<UseGetProps<User, void>, 'path'> & {
  username: string
}

/**
 * Get user by user name
 */
export const useGetUserByName = ({ username, ...props }: UseGetUserByNameProps) =>
  useGet<User, void, void>(`/user/${username}`, props)

export type UpdateUserProps = Omit<MutateProps<void, void, void, User>, 'path' | 'verb'> & {
  username: string
}

/**
 * Updated user
 *
 * This can only be done by the logged in user.
 */
export const UpdateUser = ({ username, ...props }: UpdateUserProps) => (
  <Mutate<void, void, void, User> verb='PUT' path={`/user/${username}`} {...props} />
)

export type UseUpdateUserProps = Omit<UseMutateProps<void, void, User>, 'path' | 'verb'> & {
  username: string
}

/**
 * Updated user
 *
 * This can only be done by the logged in user.
 */
export const useUpdateUser = ({ username, ...props }: UseUpdateUserProps) =>
  useMutate<void, void, void, User>('PUT', `/user/${username}`, props)

export type DeleteUserProps = Omit<MutateProps<void, void, void, string>, 'path' | 'verb'>

/**
 * Delete user
 *
 * This can only be done by the logged in user.
 */
export const DeleteUser = (props: DeleteUserProps) => (
  <Mutate<void, void, void, string> verb='DELETE' path={`/user`} {...props} />
)

export type UseDeleteUserProps = Omit<UseMutateProps<void, void, string>, 'path' | 'verb'>

/**
 * Delete user
 *
 * This can only be done by the logged in user.
 */
export const useDeleteUser = (props: UseDeleteUserProps) =>
  useMutate<void, void, void, string>('DELETE', `/user`, props)

export interface LoginUserQueryParams {
  /**
   * The user name for login
   */
  username: string
  /**
   * The password for login in clear text
   */
  password: string
}

export type LoginUserProps = Omit<GetProps<string, void, LoginUserQueryParams>, 'path'>

/**
 * Logs user into the system
 */
export const LoginUser = (props: LoginUserProps) => (
  <Get<string, void, LoginUserQueryParams> path={`/user/login`} {...props} />
)

export type UseLoginUserProps = Omit<UseGetProps<string, LoginUserQueryParams>, 'path'>

/**
 * Logs user into the system
 */
export const useLoginUser = (props: UseLoginUserProps) =>
  useGet<string, void, LoginUserQueryParams>(`/user/login`, props)

export type LogoutUserProps = Omit<GetProps<void, void, void>, 'path'>

/**
 * Logs out current logged in user session
 */
export const LogoutUser = (props: LogoutUserProps) => (
  <Get<void, void, void> path={`/user/logout`} {...props} />
)

export type UseLogoutUserProps = Omit<UseGetProps<void, void>, 'path'>

/**
 * Logs out current logged in user session
 */
export const useLogoutUser = (props: UseLogoutUserProps) =>
  useGet<void, void, void>(`/user/logout`, props)
